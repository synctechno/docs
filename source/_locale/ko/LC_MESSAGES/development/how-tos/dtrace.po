# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, Deciso B.V
# This file is distributed under the same license as the OPNsense package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OPNsense Wiki & Documentation<br/><small>351a8e2\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2022-01-14 13:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/development/how-tos/dtrace.rst:3
msgid "Profiling/Debugging the kernel"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:7
msgid "Overview"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:9
msgid ""
"Kernel development often involves writing code without an IDE. Even if an"
" IDE is used, proper profiling support is often lacking. Luckily, FreeBSD"
" includes DTrace."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:12
msgid ""
"Since OPNsense runs on a fork of FreeBSD, DTrace is natively available on"
" the system for developers to use in debugging and profiling. To quote "
"the FreeBSD handbook on DTrace:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:30
msgid ""
"We will be looking at setting up DTrace on OPNsense, and running a sample"
" script to perform some useful analysis on kernel space. An example for "
"generating a FlameGraph will also be presented. Keep in mind that user "
"space can also be analyzed using DTrace, but this is beyond the scope of "
"this document."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:35
msgid ""
"Although detailed steps for enabling DTrace in a custom kernel are widely"
" available, this document provides an explanation in combination with the"
" use of OPNsense-specific tools. Further resources will be provided at "
"the end of this document."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:41
msgid ""
"All generic DTrace concepts, as well as default probe providers are "
"documented `here <http://dtrace.org/guide/preface.html#preface>`__. If "
"you are interested in using DTrace to profile performance issues, we "
"suggest reading the documentation before proceeding. We will not go into "
"too much detail here to prevent cluttering the document and keep it "
"simple and to-the-point."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:49
msgid "Enabling DTrace"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:51
msgid ""
"Make sure the OPNsense/src repository is present on the system and "
"navigate to :code:`/usr/src/sys/[ARCHITECTURE, e.g. amd64]/conf` and open"
" up :code:`GENERIC`. Add the following options:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:63
msgid ""
"CTF type data is described `here "
"<https://www.freebsd.org/cgi/man.cgi?query=ctf&sektion=5&manpath=freebsd-"
"release-ports>`__. The idea is to represent the types used in a C program"
" within the executable, allowing users of DTrace to access symbols and "
"function parameters during runtime."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:68
msgid ""
"As a best practice, under stock FreeBSD you would save the file under a "
"different name (e.g. DTRACE) and build the kernel by specifying "
":code:`KERNCONF=DTRACE`. The opnsense-tools require the name to be "
":code:`GENERIC`, so we will leave it as is. It is advisable to create a "
"backup of the original :code:`GENERIC` file though. Make sure the "
"OPNsense-tools repository is installed and navigate to "
":code:`/usr/tools/config/[VERSION]`. Open up :code:`SMP` and make sure "
"the following line is either removed or commented out:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:79
msgid ""
"Furthermore, should you wish to enable DTrace in Userspace, it is "
"imperative that you also add the following line to "
":code:`/usr/tools/conf/[VERSION]/make.conf`"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:87
msgid "Now clean and build the new kernel"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:93
msgid "A kernel package will be available at the following location:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:95
msgid ":code:`/usr/local/opnsense/build/[Version]/[Architecture]/sets/kernel*.txz`"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:97
msgid "Install the package using our :code:`opnsense-update` command:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:103
msgid ""
"Where [version] is the version part of the kernel package, such as "
":code:`21.1.a_83`"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:107
msgid "Test the installation"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:109
msgid ""
"Follow the steps described in the section 'Getting Started' `here "
"<https://wiki.freebsd.org/DTrace/KernelSupport>`__"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:113
msgid "DTrace program"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:115
msgid ""
"Although it is possible to instruct DTrace to execute a certain function "
"on the command line (and there are a lot of one-liners for this `here  "
"<https://wiki.freebsd.org/DTrace/One-Liners>`__), instead we present a D "
"script that measures some statistics on the ixgbe 10GbE driver and shows "
"some interesting capabilities of DTrace in one go. Specifically, it "
"measures the amount of interrupts fired on the packet receive side, as "
"well as the time spent in the relevant functions in nanoseconds. It also "
"measures how many threads on average are waiting to be serviced because "
"another thread is busy."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:124
msgid "The one-line command to pre-process, compile and run the script is:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:130
msgid ""
"The :code:`-C` option specifies that the standard C preprocessor should "
"evaluate the file, ensuring that the C-specific code like macro "
"definitions are defined."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:133
msgid "The output (when pinging the device):"
msgstr ""

msgid "Dtrace Output"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:138
msgid ""
"Notice how the queue behaviour section shows no output, this is because "
"there is no actual queue behaviour going on. There is simply too little "
"traffic for the kernel to be queueing threads. When stressing the driver,"
" it might look something like this:"
msgstr ""

msgid "Queue behaviour"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:147
msgid "Flame Graphs"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:149
msgid "If you run the following command:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:155
msgid "Let it run for a while, and exit using :code:`CTRL-C`"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:157
msgid ""
"You will see all `stack frames "
"<https://en.wikipedia.org/wiki/Call_stack>`__ associated with "
":code:`uiomove()` that have taken place, aggregated to only unique "
"frames. The number below the individual frame represents the amount of "
"times that particular frame was executed. Although this is nice, it isn't"
" particulary visually pleasing or helpful in spotting potential "
"bottlenecks."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:162
msgid ""
"A senior performance analyst at Netflix, named Brendan Gregg, developed "
"the `FlameGraph <https://github.com/brendangregg/FlameGraph>`__ for use "
"with DTrace (and other profiling tools). The program consists of a set of"
" Perl files that take in the data produced by a command similar to the "
"one we executed, and generate a graph that helps spot 'hot code paths'. "
"This time however, we will look at the kernel as a whole and sample it in"
" a set interval."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:168
msgid ""
"1. Clone the `repository <https://github.com/brendangregg/FlameGraph>`__ "
"and instruct dtrace to sample kernel stacks at a rate of 997 Hertz for 60"
" seconds:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:175
msgid ""
"Collapse the individual lines in the output file by folding it into "
"single lines:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:181
msgid ""
"Having a separate folded input file allows for grepping functions of "
"interest:"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:189
msgid ""
"If you get the message \"Command not found\", use the command :code:`perl"
" stackcollapse.pl out.kern_stacks > out.kern_folded`"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:192
msgid "Generate a flame graph:"
msgstr ""

msgid "FlameGraph"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:201
msgid "The output image is an SVG file, enabling interaction within a browser."
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:205
msgid "Other Resources"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:206
msgid ""
"Brendan Gregg's collection of DTrace programs: "
"http://www.brendangregg.com/dtrace.html"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:209
msgid ""
"Using the right datatypes in DTrace to increase profiling performance: "
"http://dtrace.org/blogs/brendan/2011/11/25/dtrace-variable-types/"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:212
msgid ""
"FreeBSD DTrace manual page: "
"https://www.freebsd.org/cgi/man.cgi?query=dtrace"
msgstr ""

#: ../../source/development/how-tos/dtrace.rst:215
msgid "FreeBSD DTrace one-liners: https://wiki.freebsd.org/DTrace/One-Liners"
msgstr ""

