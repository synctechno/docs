# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2022, Deciso B.V
# This file is distributed under the same license as the OPNsense package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OPNsense Wiki & Documentation<br/><small>351a8e2\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2022-01-14 13:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/development/backend/legacy.rst:3
msgid "Using legacy plugins"
msgstr ""

#: ../../source/development/backend/legacy.rst:7
msgid "General"
msgstr ""

#: ../../source/development/backend/legacy.rst:9
msgid "Legacy type plugins are located in the following location:"
msgstr ""

#: ../../source/development/backend/legacy.rst:15
msgid "And contain files with the extension \".inc\"."
msgstr ""

#: ../../source/development/backend/legacy.rst:17
msgid ""
"All automatically registered functions start with the name of the file "
"(without the extension), followed by the purpose. For example "
"*vpn_configure* would be the *configure* handle in a plugin file name "
"vpn.inc."
msgstr ""

#: ../../source/development/backend/legacy.rst:20
msgid ""
"With the use of these plugins, you have the ability to hook into "
"different areas of the system, such as registration of new interface "
"types and making sure services are shown in the regular service overview."
msgstr ""

#: ../../source/development/backend/legacy.rst:26
msgid "Services"
msgstr ""

#: ../../source/development/backend/legacy.rst:28
msgid ""
"To register services, the :code:`<plugin>_services()` function should "
"return a structure containing its name, description and operating "
"properties."
msgstr ""

#: ../../source/development/backend/legacy.rst:44
msgid ""
"To list all available services from the command line, you can use "
"pluginctl (bundled with our core system)."
msgstr ""

#: ../../source/development/backend/legacy.rst:51
msgid ""
"The same tool can also be used to execute the [re]start/stop operations, "
"for the example above, a restart would look like:"
msgstr ""

#: ../../source/development/backend/legacy.rst:60
msgid "Configure"
msgstr ""

#: ../../source/development/backend/legacy.rst:62
msgid ""
"The configure plugin can be used to catch certain events, such as "
":code:`bootup`, :code:`newwanip` and others."
msgstr ""

#: ../../source/development/backend/legacy.rst:64
msgid ""
"A small sample of a registration is shown below, which registers the "
"functions :code:`myplugin_configure()` on bootup and "
":code:`myplugin_configure()_vpn` on vpn state change where the latter is "
"accepting two (2) parameters at most."
msgstr ""

#: ../../source/development/backend/legacy.rst:79
msgid ""
"To list all available hooks, you can use :code:`pluginctl` without "
"parameters:"
msgstr ""

#: ../../source/development/backend/legacy.rst:86
msgid ""
"Below you will find an incomplete list of the most common used events "
"that are handled at the moment:"
msgstr ""

#: ../../source/development/backend/legacy.rst:89
msgid "Event"
msgstr ""

#: ../../source/development/backend/legacy.rst:89
msgid "When"
msgstr ""

#: ../../source/development/backend/legacy.rst:91
msgid "early"
msgstr ""

#: ../../source/development/backend/legacy.rst:91
msgid ""
"Early in bootup process, before normal services are started (things like "
"ssh and the webconfigurator use this spot)"
msgstr ""

#: ../../source/development/backend/legacy.rst:93
msgid "bootup"
msgstr ""

#: ../../source/development/backend/legacy.rst:93
msgid ""
"Bootup, normal legacy service configuration, when not using the "
":code:`rc(8)` system (for example: unbound, ntpd)"
msgstr ""

#: ../../source/development/backend/legacy.rst:95
msgid "newwanip"
msgstr ""

#: ../../source/development/backend/legacy.rst:95
msgid ""
"Triggered after configuration of a new interface address, expects a "
"maximum of two positional parameters (:code:`$verbose` and "
":code:`$interface`)."
msgstr ""

#: ../../source/development/backend/legacy.rst:97
msgid "monitor"
msgstr ""

#: ../../source/development/backend/legacy.rst:97
msgid "Executed when there are changes that involve (dpinger) gateway monitoring."
msgstr ""

#: ../../source/development/backend/legacy.rst:101
msgid ":code:`pluginctl`  can also be used to trigger a specific event, such as:"
msgstr ""

#: ../../source/development/backend/legacy.rst:110
msgid "Firewall"
msgstr ""

#: ../../source/development/backend/legacy.rst:112
msgid ""
"To register firewall rules, create a function called "
":code:`<plugin>_firewall()`, this will pass a plugin object you can use "
"to generate new firewall rules."
msgstr ""

#: ../../source/development/backend/legacy.rst:115
msgid "A very simplified example of such a rule is included below:"
msgstr ""

#: ../../source/development/backend/legacy.rst:125
msgid ":code:`configctl` can be used to reload the firewall and test your plugin:"
msgstr ""

#: ../../source/development/backend/legacy.rst:132
msgid "This will generate a rule like (in /tmp/rules.debug):"
msgstr ""

#: ../../source/development/backend/legacy.rst:141
msgid "Interface"
msgstr ""

#: ../../source/development/backend/legacy.rst:143
msgid ""
"To register new (virtual) interfaces, create a function called "
":code:`<plugin>_interfaces()`, which should return a named array "
"containing the unique interface name as key (enc0 for ipsec for example)."
msgstr ""

#: ../../source/development/backend/legacy.rst:145
msgid "Every item should contain the following properties:"
msgstr ""

#: ../../source/development/backend/legacy.rst:148
msgid "Property"
msgstr ""

#: ../../source/development/backend/legacy.rst:148
msgid "Syntax"
msgstr ""

#: ../../source/development/backend/legacy.rst:148
msgid "Description"
msgstr ""

#: ../../source/development/backend/legacy.rst:150
msgid "enable"
msgstr ""

#: ../../source/development/backend/legacy.rst:150
#: ../../source/development/backend/legacy.rst:160
msgid "boolean"
msgstr ""

#: ../../source/development/backend/legacy.rst:150
msgid "interface enabled, if so it will be saved in the config"
msgstr ""

#: ../../source/development/backend/legacy.rst:152
msgid "descr"
msgstr ""

#: ../../source/development/backend/legacy.rst:152
#: ../../source/development/backend/legacy.rst:156
#: ../../source/development/backend/legacy.rst:158
msgid "text"
msgstr ""

#: ../../source/development/backend/legacy.rst:152
msgid "User readable description"
msgstr ""

#: ../../source/development/backend/legacy.rst:154
msgid "networks"
msgstr ""

#: ../../source/development/backend/legacy.rst:154
msgid "array, [network, mask]"
msgstr ""

#: ../../source/development/backend/legacy.rst:154
msgid "list of named arrays containing remote networks"
msgstr ""

#: ../../source/development/backend/legacy.rst:156
msgid "type"
msgstr ""

#: ../../source/development/backend/legacy.rst:156
msgid "\"none\""
msgstr ""

#: ../../source/development/backend/legacy.rst:158
msgid "if"
msgstr ""

#: ../../source/development/backend/legacy.rst:158
msgid "physical interface (e.g. enc0)"
msgstr ""

#: ../../source/development/backend/legacy.rst:160
msgid "virtual"
msgstr ""

#: ../../source/development/backend/legacy.rst:160
msgid "Virtual interface, true/false"
msgstr ""

#: ../../source/development/backend/legacy.rst:163
msgid "Example:"
msgstr ""

#: ../../source/development/backend/legacy.rst:190
msgid "Syslog"
msgstr ""

#: ../../source/development/backend/legacy.rst:192
msgid ""
"To register syslog targets, the :code:`<plugin>_syslog()` function should"
" return a structure containing targets and definitions."
msgstr ""

#: ../../source/development/backend/legacy.rst:208
msgid ""
"As of OPNsense 19.7 Syslog-NG is included in our base system, when not "
"using circular logs, these files will only be used to identify "
"applications for custom syslog remote targets in "
":menuselection:`System->Settings->Logging / targets`."
msgstr ""

#: ../../source/development/backend/legacy.rst:212
msgid ""
"To test if a service registration functions properly, just restart the "
"syslog facility:"
msgstr ""

#: ../../source/development/backend/legacy.rst:221
msgid ""
"In order to define local targets for Syslog-NG you can just add **local**"
" filters which will be collected into one large syslog configuration. The"
" readme on `GitHub "
"<https://github.com/opnsense/core/blob/master/src/opnsense/service/templates/OPNsense/Syslog/local/README>`__"
" describes the process. When running into issues, always make sure to "
"manually restart syslog-ng first (:code:`service syslog-ng restart`), "
"definition errors won't be written into any log."
msgstr ""

#: ../../source/development/backend/legacy.rst:231
msgid "XMLRPC (HA) sync"
msgstr ""

#: ../../source/development/backend/legacy.rst:233
msgid ""
"When a configuration section should be exposed to High Availability sync,"
" you can use the xmlrpc plugin hook."
msgstr ""

#: ../../source/development/backend/legacy.rst:235
msgid ""
"If a plugin exposes a configuration section to ha sync, it can be enabled"
" separately in the synchronization settings :menuselection:`System->High "
"Availability->Settings`."
msgstr ""

#: ../../source/development/backend/legacy.rst:238
msgid ""
"A simple example to expose the configuration section Myplugin within the "
"OPNsense xml path looks like this:"
msgstr ""

#: ../../source/development/backend/legacy.rst:258
msgid ""
"If your plugin depends on other components in the system, make sure you "
"enable synchronization for those as well."
msgstr ""

